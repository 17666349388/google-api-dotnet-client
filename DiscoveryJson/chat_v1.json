{
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Hangouts Chat API",
  "ownerName": "Google",
  "resources": {
    "spaces": {
      "methods": {
        "list": {
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "A token identifying a page of results the server should return.",
              "type": "string"
            },
            "pageSize": {
              "location": "query",
              "description": "Requested page size. The value is capped at 1000.\nServer may return fewer results than requested.\nIf unspecified, server will default to 100.",
              "format": "int32",
              "type": "integer"
            }
          },
          "flatPath": "v1/spaces",
          "id": "chat.spaces.list",
          "path": "v1/spaces",
          "description": "Lists spaces the caller is a member of.",
          "httpMethod": "GET",
          "parameterOrder": [],
          "response": {
            "$ref": "ListSpacesResponse"
          }
        },
        "get": {
          "description": "Returns a space.",
          "response": {
            "$ref": "Space"
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "Required. Resource name of the space, in the form \"spaces/*\".\n\nExample: spaces/AAAAMpdlehY",
              "required": true,
              "type": "string",
              "pattern": "^spaces/[^/]+$",
              "location": "path"
            }
          },
          "flatPath": "v1/spaces/{spacesId}",
          "path": "v1/{+name}",
          "id": "chat.spaces.get"
        }
      },
      "resources": {
        "members": {
          "methods": {
            "list": {
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A token identifying a page of results the server should return."
                },
                "pageSize": {
                  "location": "query",
                  "description": "Requested page size. The value is capped at 1000.\nServer may return fewer results than requested.\nIf unspecified, server will default to 100.",
                  "format": "int32",
                  "type": "integer"
                },
                "parent": {
                  "description": "Required. The resource name of the space for which membership list is to be\nfetched, in the form \"spaces/*\".\n\nExample: spaces/AAAAMpdlehY",
                  "required": true,
                  "type": "string",
                  "pattern": "^spaces/[^/]+$",
                  "location": "path"
                }
              },
              "flatPath": "v1/spaces/{spacesId}/members",
              "path": "v1/{+parent}/members",
              "id": "chat.spaces.members.list",
              "description": "Lists human memberships in a space.",
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET"
            },
            "get": {
              "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
              "id": "chat.spaces.members.get",
              "path": "v1/{+name}",
              "description": "Returns a membership.",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Membership"
              },
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "Required. Resource name of the membership to be retrieved, in the form\n\"spaces/*/members/*\".\n\nExample: spaces/AAAAMpdlehY/members/105115627578887013105",
                  "required": true,
                  "type": "string",
                  "pattern": "^spaces/[^/]+/members/[^/]+$"
                }
              }
            }
          }
        },
        "messages": {
          "methods": {
            "update": {
              "response": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PUT",
              "parameters": {
                "name": {
                  "description": "Resource name, in the form \"spaces/*/messages/*\".\n\nExample: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "required": true,
                  "type": "string",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "location": "path"
                },
                "updateMask": {
                  "location": "query",
                  "description": "Required. The field paths to be updated.\n\nCurrently supported field paths: \"text\", \"cards\".",
                  "format": "google-fieldmask",
                  "type": "string"
                }
              },
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "path": "v1/{+name}",
              "id": "chat.spaces.messages.update",
              "request": {
                "$ref": "Message"
              },
              "description": "Updates a message."
            },
            "create": {
              "path": "v1/{+parent}/messages",
              "id": "chat.spaces.messages.create",
              "request": {
                "$ref": "Message"
              },
              "description": "Creates a message.",
              "response": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "pattern": "^spaces/[^/]+$",
                  "location": "path",
                  "description": "Required. Space resource name, in the form \"spaces/*\".\nExample: spaces/AAAAMpdlehY",
                  "required": true,
                  "type": "string"
                },
                "threadKey": {
                  "location": "query",
                  "description": "Opaque thread identifier string that can be specified to group messages\ninto a single thread. If this is the first message with a given thread\nidentifier, a new thread is created. Subsequent messages with the same\nthread identifier will be posted into the same thread. This relieves bots\nand webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post\nfurther updates to it.\n\nHas no effect if thread field,\ncorresponding to an existing thread, is set in message.",
                  "type": "string"
                }
              },
              "flatPath": "v1/spaces/{spacesId}/messages"
            },
            "delete": {
              "description": "Deletes a message.",
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "Required. Resource name of the message to be deleted, in the form\n\"spaces/*/messages/*\"\n\nExample: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "required": true,
                  "type": "string",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$"
                }
              },
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "path": "v1/{+name}",
              "id": "chat.spaces.messages.delete"
            },
            "get": {
              "response": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the message to be retrieved, in the form\n\"spaces/*/messages/*\".\n\nExample: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "required": true,
                  "type": "string",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "location": "path"
                }
              },
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "path": "v1/{+name}",
              "id": "chat.spaces.messages.get",
              "description": "Returns a message."
            }
          }
        }
      }
    }
  },
  "parameters": {
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json"
    }
  },
  "version": "v1",
  "baseUrl": "https://chat.googleapis.com/",
  "kind": "discovery#restDescription",
  "description": "Enables bots to fetch information and perform actions in Hangouts Chat.",
  "servicePath": "",
  "basePath": "",
  "revision": "20180905",
  "documentationLink": "https://developers.google.com/hangouts/chat",
  "id": "chat:v1",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "Empty": {
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "KeyValue": {
      "description": "A UI element contains a key (label) and a value (content). And this\nelement may also contain some actions such as onclick button.",
      "type": "object",
      "properties": {
        "topLabel": {
          "description": "The text of the top label. Formatted text supported.",
          "type": "string"
        },
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "button": {
          "$ref": "Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "content": {
          "description": "The text of the content. Formatted text supported and always required.",
          "type": "string"
        },
        "bottomLabel": {
          "description": "The text of the bottom label. Formatted text supported.",
          "type": "string"
        },
        "icon": {
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "description": "An enum value that will be replaced by the Chat API with the\ncorresponding icon image.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "contentMultiline": {
          "type": "boolean",
          "description": "If the content should be multiline."
        },
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action. Only the top label, bottom label and content region\nare clickable."
        }
      },
      "id": "KeyValue"
    },
    "Thread": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name, in the form \"spaces/*/threads/*\".\n\nExample: spaces/AAAAMpdlehY/threads/UMxbHmzDlr4",
          "type": "string"
        }
      },
      "id": "Thread",
      "description": "A thread in Hangouts Chat."
    },
    "Section": {
      "description": "A section contains a collection of widgets that are rendered\n(vertically) in the order that they are specified. Across all platforms,\ncards have a narrow fixed width, so\nthere is currently no need for layout properties (e.g. float).",
      "type": "object",
      "properties": {
        "header": {
          "description": "The header of the section, text formatted supported.",
          "type": "string"
        },
        "widgets": {
          "description": "A section must contain at least 1 widget.",
          "type": "array",
          "items": {
            "$ref": "WidgetMarkup"
          }
        }
      },
      "id": "Section"
    },
    "OpenLink": {
      "description": "A link that opens a new window.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        }
      },
      "id": "OpenLink"
    },
    "Button": {
      "description": "A button. Can be a text button or an image button.",
      "type": "object",
      "properties": {
        "textButton": {
          "description": "A button with text and onclick action.",
          "$ref": "TextButton"
        },
        "imageButton": {
          "$ref": "ImageButton",
          "description": "A button with image and onclick action."
        }
      },
      "id": "Button"
    },
    "ListMembershipsResponse": {
      "type": "object",
      "properties": {
        "memberships": {
          "description": "List of memberships in the requested (or first) page.",
          "type": "array",
          "items": {
            "$ref": "Membership"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token to retrieve the next page of results. It will be empty\nfor the last page of results."
        }
      },
      "id": "ListMembershipsResponse"
    },
    "UserMentionMetadata": {
      "description": "Annotation metadata for user mentions (@).",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "User",
          "description": "The user mentioned."
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add user to space.",
            "Mention user in space."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "MENTION"
          ],
          "description": "The type of user mention.",
          "type": "string"
        }
      },
      "id": "UserMentionMetadata"
    },
    "CardAction": {
      "description": "A card action is\nthe action associated with the card. For an invoice card, a\ntypical action would be: delete invoice, email invoice or open the\ninvoice in browser.",
      "type": "object",
      "properties": {
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action for this action item."
        },
        "actionLabel": {
          "description": "The label used to be displayed in the action menu item.",
          "type": "string"
        }
      },
      "id": "CardAction"
    },
    "FormAction": {
      "description": "A form action describes the behavior when the form is submitted.\nFor example, an Apps Script can be invoked to handle the form.",
      "type": "object",
      "properties": {
        "actionMethodName": {
          "description": "Apps Script function to invoke when the containing element is\nclicked/activated.",
          "type": "string"
        },
        "parameters": {
          "description": "List of action parameters.",
          "type": "array",
          "items": {
            "$ref": "ActionParameter"
          }
        }
      },
      "id": "FormAction"
    },
    "Image": {
      "description": "An image that is specified by a URL and can have an onclick action.",
      "type": "object",
      "properties": {
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        },
        "aspectRatio": {
          "description": "The aspect ratio of this image (width/height).",
          "format": "double",
          "type": "number"
        },
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        }
      },
      "id": "Image"
    },
    "Annotation": {
      "description": "Annotations associated with the plain-text body of the message.\n\nExample plain-text message body:\n```\nHello @FooBot how are you!\"\n```\n\nThe corresponding annotations metadata:\n```\n\"annotations\":[{\n  \"type\":\"USER_MENTION\",\n  \"startIndex\":6,\n  \"length\":7,\n  \"userMention\": {\n    \"user\": {\n      \"name\":\"users/107946847022116401880\",\n      \"displayName\":\"FooBot\",\n      \"avatarUrl\":\"https://goo.gl/aeDtrS\",\n      \"type\":\"BOT\"\n    },\n    \"type\":\"MENTION\"\n   }\n}]\n```",
      "type": "object",
      "properties": {
        "userMention": {
          "$ref": "UserMentionMetadata",
          "description": "The metadata of user mention."
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A user is mentioned."
          ],
          "enum": [
            "ANNOTATION_TYPE_UNSPECIFIED",
            "USER_MENTION"
          ],
          "description": "The type of this annotation."
        },
        "length": {
          "description": "Length of the substring in the plain-text message body this annotation\ncorresponds to.",
          "format": "int32",
          "type": "integer"
        },
        "startIndex": {
          "description": "Start index (0-based, inclusive) in the plain-text message body this\nannotation corresponds to.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "Annotation"
    },
    "WidgetMarkup": {
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object",
      "properties": {
        "textParagraph": {
          "$ref": "TextParagraph",
          "description": "Display a text paragraph in this widget."
        },
        "keyValue": {
          "$ref": "KeyValue",
          "description": "Display a key value item in this widget."
        },
        "image": {
          "$ref": "Image",
          "description": "Display an image in this widget."
        },
        "buttons": {
          "description": "A list of buttons. Buttons is also oneof data and only one of these\nfields should be set.",
          "type": "array",
          "items": {
            "$ref": "Button"
          }
        }
      },
      "id": "WidgetMarkup"
    },
    "ActionResponse": {
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default type; will be handled as NEW_MESSAGE.",
            "Post as a new message in the topic.",
            "Update the bot's own message. (Only after CARD_CLICKED events.)",
            "Privately ask the user for additional auth or config."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "NEW_MESSAGE",
            "UPDATE_MESSAGE",
            "REQUEST_CONFIG"
          ],
          "description": "The type of bot response.",
          "type": "string"
        },
        "url": {
          "description": "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)",
          "type": "string"
        }
      },
      "id": "ActionResponse",
      "description": "Parameters that a bot can use to configure how it's response is posted."
    },
    "Space": {
      "description": "A room or DM in Hangouts Chat.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the space, in the form \"spaces/*\".\n\nExample: spaces/AAAAMpdlehYs",
          "type": "string"
        },
        "displayName": {
          "description": "Output only. The display name (only if the space is a room).",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "",
            "A chat space where memberships are free to change. Messages in rooms are\nthreaded.",
            "1:1 Direct Message between a human and a bot, where all messages are\nflat."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ROOM",
            "DM"
          ],
          "description": "Output only. The type of a space.",
          "type": "string"
        }
      },
      "id": "Space"
    },
    "Card": {
      "id": "Card",
      "description": "A card is a UI element that can contain UI widgets such as texts, images.",
      "type": "object",
      "properties": {
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "CardHeader"
        },
        "name": {
          "type": "string",
          "description": "Name of the card."
        },
        "sections": {
          "description": "Sections are separated by a line divider.",
          "type": "array",
          "items": {
            "$ref": "Section"
          }
        },
        "cardActions": {
          "description": "The actions of this card.",
          "type": "array",
          "items": {
            "$ref": "CardAction"
          }
        }
      }
    },
    "Message": {
      "id": "Message",
      "description": "A message in Hangouts Chat.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name, in the form \"spaces/*/messages/*\".\n\nExample: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
          "type": "string"
        },
        "previewText": {
          "description": "Text for generating preview chips. This text will not be displayed to the\nuser, but any links to images, web pages, videos, etc. included here will\ngenerate preview chips.",
          "type": "string"
        },
        "space": {
          "description": "The space the message belongs to.",
          "$ref": "Space"
        },
        "text": {
          "description": "Plain-text body of the message.",
          "type": "string"
        },
        "fallbackText": {
          "description": "A plain-text description of the message's cards, used when the actual cards\ncannot be displayed (e.g. mobile notifications).",
          "type": "string"
        },
        "argumentText": {
          "description": "Plain-text body of the message with all bot mentions stripped out.",
          "type": "string"
        },
        "actionResponse": {
          "$ref": "ActionResponse",
          "description": "Input only. Parameters that a bot can use to configure how its response is\nposted."
        },
        "createTime": {
          "description": "Output only. The time at which the message was created in Hangouts Chat\nserver.",
          "format": "google-datetime",
          "type": "string"
        },
        "cards": {
          "description": "Rich, formatted and interactive cards that can be used to display UI\nelements such as: formatted texts, buttons, clickable images. Cards are\nnormally displayed below the plain-text body of the message.",
          "type": "array",
          "items": {
            "$ref": "Card"
          }
        },
        "sender": {
          "$ref": "User",
          "description": "The user who created the message."
        },
        "thread": {
          "$ref": "Thread",
          "description": "The thread the message belongs to."
        },
        "annotations": {
          "description": "Output only. Annotations associated with the text in this message.",
          "type": "array",
          "items": {
            "$ref": "Annotation"
          }
        }
      }
    },
    "DeprecatedEvent": {
      "description": "Hangouts Chat events.",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "FormAction",
          "description": "The form action data associated with an interactive card that was clicked.\nOnly populated for\nCARD_CLICKED events.\nSee the [Interactive Cards guide](/hangouts/chat/how-tos/cards-onclick) for\nmore information."
        },
        "user": {
          "$ref": "User",
          "description": "The user that triggered the event."
        },
        "space": {
          "description": "The room or DM in which the event occurred.",
          "$ref": "Space"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A message was sent in a room or direct message.",
            "The bot was added to a room or DM.",
            "The bot was removed from a room or DM.",
            "The bot's interactive card was clicked."
          ],
          "enum": [
            "UNSPECIFIED",
            "MESSAGE",
            "ADDED_TO_SPACE",
            "REMOVED_FROM_SPACE",
            "CARD_CLICKED"
          ],
          "description": "The type of the event."
        },
        "configCompleteRedirectUrl": {
          "description": "The URL the bot should redirect the user to after they have completed an\nauthorization or configuration flow outside of Hangouts Chat. See the\n[Authorizing access to 3p services guide](/hangouts/chat/how-tos/auth-3p)\nfor more information.",
          "type": "string"
        },
        "threadKey": {
          "description": "The bot-defined key for the thread related to the event. See the\nthread_key field of the\n`spaces.message.create` request for more information.",
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "A secret value that bots can use to verify if a request is from Google. The\ntoken is randomly generated by Google, remains static, and can be obtained\nfrom the Hangouts Chat API configuration page in the Cloud Console.\nDevelopers can revoke/regenerate it if needed from the same page."
        },
        "eventTime": {
          "description": "The timestamp indicating when the event was dispatched.",
          "format": "google-datetime",
          "type": "string"
        },
        "message": {
          "$ref": "Message",
          "description": "The message that triggered the event, if applicable."
        }
      },
      "id": "DeprecatedEvent"
    },
    "OnClick": {
      "description": "An onclick action (e.g. open a link).",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "FormAction",
          "description": "A form action will be trigger by this onclick if specified."
        },
        "openLink": {
          "$ref": "OpenLink",
          "description": "This onclick triggers an open link action if specified."
        }
      },
      "id": "OnClick"
    },
    "ActionParameter": {
      "id": "ActionParameter",
      "description": "List of string parameters to supply when the action method is invoked.\nFor example, consider three snooze buttons: snooze now, snooze 1 day,\nsnooze next week. You might use action method = snooze(), passing the\nsnooze type and snooze time in the list of string parameters.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the parameter.",
          "type": "string"
        },
        "key": {
          "description": "The name of the parameter for the action script.",
          "type": "string"
        }
      }
    },
    "User": {
      "description": "A user in Hangouts Chat.",
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Human user.",
            "Bot user."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "HUMAN",
            "BOT"
          ],
          "description": "User type.",
          "type": "string"
        },
        "name": {
          "description": "Resource name, in the format \"users/*\".",
          "type": "string"
        },
        "displayName": {
          "description": "The user's display name.",
          "type": "string"
        }
      },
      "id": "User"
    },
    "Membership": {
      "properties": {
        "member": {
          "$ref": "User",
          "description": "Member details."
        },
        "createTime": {
          "description": "The creation time of the membership a.k.a the time at which the member\njoined the space, if applicable.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "description": "State of the membership.",
          "type": "string",
          "enumDescriptions": [
            "Default, do not use.",
            "The user has joined the space.",
            "The user has been invited, is able to join the space, but currently has\nnot joined.",
            "The user is not a member of the space, has not been invited and is not\nable to join the space."
          ],
          "enum": [
            "MEMBERSHIP_STATE_UNSPECIFIED",
            "JOINED",
            "INVITED",
            "NOT_A_MEMBER"
          ]
        },
        "name": {
          "type": "string",
          "description": "Resource name of the membership, in the form \"spaces/*/members/*\".\n\nExample: spaces/AAAAMpdlehY/members/105115627578887013105"
        }
      },
      "id": "Membership",
      "description": "Represents a membership relation in Hangouts Chat.",
      "type": "object"
    },
    "TextParagraph": {
      "description": "A paragraph of text. Formatted text supported.",
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "TextParagraph"
    },
    "ListSpacesResponse": {
      "type": "object",
      "properties": {
        "spaces": {
          "description": "List of spaces in the requested (or first) page.",
          "type": "array",
          "items": {
            "$ref": "Space"
          }
        },
        "nextPageToken": {
          "description": "Continuation token to retrieve the next page of results. It will be empty\nfor the last page of results. Tokens expire in an hour. An error is thrown\nif an expired token is passed.",
          "type": "string"
        }
      },
      "id": "ListSpacesResponse"
    },
    "CardHeader": {
      "type": "object",
      "properties": {
        "imageStyle": {
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ],
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ],
          "description": "The image's type (e.g. square border or circular border).",
          "type": "string"
        },
        "title": {
          "description": "The title must be specified. The header has a fixed height: if both a\ntitle and subtitle is specified, each will take up 1 line. If only the\ntitle is specified, it will take up both lines.",
          "type": "string"
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        }
      },
      "id": "CardHeader"
    },
    "ImageButton": {
      "description": "An image button with an onclick action.",
      "type": "object",
      "properties": {
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        },
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of this image_button which will be used for accessibility.\nDefault value will be provided if developers don't specify."
        },
        "icon": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "description": "The icon specified by an enum that indices to an icon provided by Chat\nAPI.",
          "type": "string"
        }
      },
      "id": "ImageButton"
    },
    "TextButton": {
      "description": "A button with text and onclick action.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The text of the button.",
          "type": "string"
        },
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action of the button."
        }
      },
      "id": "TextButton"
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "canonicalName": "Hangouts Chat",
  "rootUrl": "https://chat.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "chat"
}
