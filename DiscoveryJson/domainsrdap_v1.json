{
  "schemas": {
    "RdapResponse": {
      "description": "Response to a general RDAP query.",
      "type": "object",
      "properties": {
        "lang": {
          "description": "Error language code. Error response info fields are defined in [section 6\nof RFC 7483](https://tools.ietf.org/html/rfc7483#section-6).",
          "type": "string"
        },
        "jsonResponse": {
          "$ref": "HttpBody",
          "description": "HTTP response with content type set to \"application/json+rdap\"."
        },
        "errorCode": {
          "type": "integer",
          "description": "Error HTTP code. Example: \"501\".",
          "format": "int32"
        },
        "title": {
          "description": "Error title.",
          "type": "string"
        },
        "notices": {
          "description": "Notices applying to this response.",
          "type": "array",
          "items": {
            "$ref": "Notice"
          }
        },
        "description": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Error description."
        },
        "rdapConformance": {
          "description": "RDAP conformance level.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "RdapResponse"
    },
    "HttpBody": {
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.",
      "type": "object",
      "properties": {
        "extensions": {
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        },
        "data": {
          "type": "string",
          "description": "The HTTP request/response body as raw binary.",
          "format": "byte"
        },
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        }
      },
      "id": "HttpBody"
    },
    "Notice": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of a notice. Example: \"Terms of Service\"."
        },
        "description": {
          "description": "Description of the notice.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "description": "Type values defined in [section 10.2.1 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-10.2.1) specific to a\nwhole response: \"result set truncated due to authorization\", \"result set\ntruncated due to excessive load\", \"result set truncated due to\nunexplainable reasons\"."
        },
        "links": {
          "description": "Link to a document containing more information.",
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        }
      },
      "id": "Notice",
      "description": "Notices object defined in [section 4.3 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-4.3)."
    },
    "Link": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Content type of the link. Example: \"application/json\".",
          "type": "string"
        },
        "media": {
          "type": "string",
          "description": "Media type of the link destination. Example: \"screen\"."
        },
        "value": {
          "description": "URL giving context for the link. Example: \"http://example.com/current\".",
          "type": "string"
        },
        "rel": {
          "description": "Relation type of a link. Example: \"previous\".",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title of this link. Example: \"title\"."
        },
        "href": {
          "description": "Target URL of a link. Example: \"http://example.com/previous\".",
          "type": "string"
        },
        "hreflang": {
          "type": "string",
          "description": "Language code of a link. Example: \"en\"."
        }
      },
      "id": "Link",
      "description": "Links object defined in [section 4.2 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-4.2)."
    }
  },
  "protocol": "rest",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "canonicalName": "Domains RDAP",
  "rootUrl": "https://domainsrdap.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "domainsrdap",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Domains RDAP API",
  "ownerName": "Google",
  "resources": {
    "entity": {
      "methods": {
        "get": {
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.",
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [
            "entityId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "entityId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "v1/entity/{entityId}",
          "path": "v1/entity/{entityId}",
          "id": "domainsrdap.entity.get"
        }
      }
    },
    "domain": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "parameterOrder": [
            "domainName"
          ],
          "response": {
            "$ref": "HttpBody"
          },
          "parameters": {
            "domainName": {
              "location": "path",
              "description": "Full domain name to look up. Example: \"example.com\"",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$"
            }
          },
          "flatPath": "v1/domain/{domainId}",
          "id": "domainsrdap.domain.get",
          "path": "v1/domain/{+domainName}",
          "description": "Look up RDAP information for a domain by name."
        }
      }
    },
    "v1": {
      "methods": {
        "getDomains": {
          "httpMethod": "GET",
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [],
          "parameters": {},
          "flatPath": "v1/domains",
          "id": "domainsrdap.getDomains",
          "path": "v1/domains",
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."
        },
        "getEntities": {
          "flatPath": "v1/entities",
          "path": "v1/entities",
          "id": "domainsrdap.getEntities",
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.",
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {}
        },
        "getNameservers": {
          "httpMethod": "GET",
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [],
          "parameters": {},
          "flatPath": "v1/nameservers",
          "id": "domainsrdap.getNameservers",
          "path": "v1/nameservers",
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."
        },
        "getHelp": {
          "flatPath": "v1/help",
          "path": "v1/help",
          "id": "domainsrdap.getHelp",
          "description": "Get help information for the RDAP API, including links to documentation.",
          "response": {
            "$ref": "HttpBody"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {}
        },
        "getIp": {
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.",
          "response": {
            "$ref": "HttpBody"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {},
          "flatPath": "v1/ip",
          "path": "v1/ip",
          "id": "domainsrdap.getIp"
        }
      }
    },
    "ip": {
      "methods": {
        "get": {
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.",
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [
            "ipId",
            "ipId1"
          ],
          "httpMethod": "GET",
          "parameters": {
            "ipId1": {
              "required": true,
              "type": "string",
              "location": "path"
            },
            "ipId": {
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "v1/ip/{ipId}/{ipId1}",
          "path": "v1/ip/{ipId}/{ipId1}",
          "id": "domainsrdap.ip.get"
        }
      }
    },
    "nameserver": {
      "methods": {
        "get": {
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [
            "nameserverId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "nameserverId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "v1/nameserver/{nameserverId}",
          "path": "v1/nameserver/{nameserverId}",
          "id": "domainsrdap.nameserver.get",
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."
        }
      }
    },
    "autnum": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "parameterOrder": [
            "autnumId"
          ],
          "response": {
            "$ref": "RdapResponse"
          },
          "parameters": {
            "autnumId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "v1/autnum/{autnumId}",
          "id": "domainsrdap.autnum.get",
          "path": "v1/autnum/{autnumId}",
          "description": "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."
        }
      }
    }
  },
  "parameters": {
    "alt": {
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    }
  },
  "version": "v1",
  "baseUrl": "https://domainsrdap.googleapis.com/",
  "kind": "discovery#restDescription",
  "description": "Read-only public API that lets users search for information about domain names.",
  "servicePath": "",
  "basePath": "",
  "revision": "20190918",
  "documentationLink": "https://developers.google.com/domains/rdap/",
  "id": "domainsrdap:v1",
  "discoveryVersion": "v1",
  "version_module": true
}
