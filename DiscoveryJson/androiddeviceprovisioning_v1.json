{
  "revision": "20170825",
  "documentationLink": "https://developers.google.com/zero-touch/",
  "id": "androiddeviceprovisioning:v1",
  "title": "Android Device Provisioning Partner API",
  "ownerName": "Google",
  "discoveryVersion": "v1",
  "version_module": true,
  "resources": {
    "partners": {
      "resources": {
        "devices": {
          "methods": {
            "unclaim": {
              "description": "Unclaim the device identified by device_id or identifier.",
              "request": {
                "$ref": "UnclaimDeviceRequest"
              },
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Id of the partner."
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:unclaim",
              "path": "v1/partners/{+partnerId}/devices:unclaim",
              "id": "androiddeviceprovisioning.partners.devices.unclaim"
            },
            "findByOwner": {
              "httpMethod": "POST",
              "parameterOrder": [
                "partnerId"
              ],
              "response": {
                "$ref": "FindDevicesByOwnerResponse"
              },
              "parameters": {
                "partnerId": {
                  "description": "id of the partner.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:findByOwner",
              "id": "androiddeviceprovisioning.partners.devices.findByOwner",
              "path": "v1/partners/{+partnerId}/devices:findByOwner",
              "request": {
                "$ref": "FindDevicesByOwnerRequest"
              },
              "description": "Find devices by ownership."
            },
            "claim": {
              "request": {
                "$ref": "ClaimDeviceRequest"
              },
              "description": "Claim the device identified by device identifier.",
              "response": {
                "$ref": "ClaimDeviceResponse"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "location": "path",
                  "description": "Id of the partner.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:claim",
              "path": "v1/partners/{+partnerId}/devices:claim",
              "id": "androiddeviceprovisioning.partners.devices.claim"
            },
            "claimAsync": {
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "format": "int64",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "partner id.",
                  "pattern": "^[^/]+$"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:claimAsync",
              "path": "v1/partners/{+partnerId}/devices:claimAsync",
              "id": "androiddeviceprovisioning.partners.devices.claimAsync",
              "description": "Claim devices asynchronously",
              "request": {
                "$ref": "ClaimDevicesRequest"
              }
            },
            "findByIdentifier": {
              "response": {
                "$ref": "FindDevicesByDeviceIdentifierResponse"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "id of the partner."
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:findByIdentifier",
              "path": "v1/partners/{+partnerId}/devices:findByIdentifier",
              "id": "androiddeviceprovisioning.partners.devices.findByIdentifier",
              "description": "Find devices by device identifier.",
              "request": {
                "$ref": "FindDevicesByDeviceIdentifierRequest"
              }
            },
            "unclaimAsync": {
              "id": "androiddeviceprovisioning.partners.devices.unclaimAsync",
              "path": "v1/partners/{+partnerId}/devices:unclaimAsync",
              "request": {
                "$ref": "UnclaimDevicesRequest"
              },
              "description": "Unclaim devices asynchronously",
              "httpMethod": "POST",
              "parameterOrder": [
                "partnerId"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "partnerId": {
                  "location": "path",
                  "description": "partner id.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:unclaimAsync"
            },
            "metadata": {
              "response": {
                "$ref": "DeviceMetadata"
              },
              "parameterOrder": [
                "metadataOwnerId",
                "deviceId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "metadataOwnerId": {
                  "description": "The owner of the newly set metadata. Should be partner id itself.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "deviceId": {
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "id of the partner."
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices/{devicesId}/metadata",
              "path": "v1/partners/{+metadataOwnerId}/devices/{+deviceId}/metadata",
              "id": "androiddeviceprovisioning.partners.devices.metadata",
              "description": "Update the metadata",
              "request": {
                "$ref": "UpdateDeviceMetadataRequest"
              }
            },
            "updateMetadataAsync": {
              "request": {
                "$ref": "UpdateDeviceMetadataInBatchRequest"
              },
              "description": "Set metadata in batch asynchronously.",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "location": "path",
                  "description": "partner id.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:updateMetadataAsync",
              "path": "v1/partners/{+partnerId}/devices:updateMetadataAsync",
              "id": "androiddeviceprovisioning.partners.devices.updateMetadataAsync"
            },
            "get": {
              "response": {
                "$ref": "Device"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "resource name in 'partners/[PARTNER_ID]/devices/[DEVICE_ID]'.",
                  "required": true,
                  "type": "string",
                  "pattern": "^partners/[^/]+/devices/[^/]+$",
                  "location": "path"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices/{devicesId}",
              "path": "v1/{+name}",
              "id": "androiddeviceprovisioning.partners.devices.get",
              "description": "Get a device"
            }
          }
        },
        "customers": {
          "methods": {
            "list": {
              "path": "v1/partners/{+partnerId}/customers",
              "id": "androiddeviceprovisioning.partners.customers.list",
              "description": "List all the customers that has delegates some role to this customer.",
              "response": {
                "$ref": "ListCustomersResponse"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "GET",
              "parameters": {
                "partnerId": {
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "the id of the partner."
                }
              },
              "flatPath": "v1/partners/{partnersId}/customers"
            }
          }
        }
      }
    },
    "operations": {
      "methods": {
        "get": {
          "response": {
            "$ref": "Operation"
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "The name of the operation resource.",
              "required": true,
              "type": "string",
              "pattern": "^operations/.+$",
              "location": "path"
            }
          },
          "flatPath": "v1/operations/{operationsId}",
          "path": "v1/{+name}",
          "id": "androiddeviceprovisioning.operations.get",
          "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice."
        }
      }
    }
  },
  "parameters": {
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "pp": {
      "description": "Pretty-print response.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "bearer_token": {
      "location": "query",
      "description": "OAuth bearer token.",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    }
  },
  "schemas": {
    "DeviceMetadata": {
      "properties": {
        "entries": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata entries",
          "type": "object"
        }
      },
      "id": "DeviceMetadata",
      "description": "A key value pair of the device metadata.",
      "type": "object"
    },
    "DevicesLongRunningOperationResponse": {
      "properties": {
        "successCount": {
          "description": "Number of succeesfully processed ones.",
          "format": "int32",
          "type": "integer"
        },
        "perDeviceStatus": {
          "description": "processing status for each device.\nOne PerDeviceStatus per device. The order is the same as in your requests.",
          "type": "array",
          "items": {
            "$ref": "OperationPerDevice"
          }
        }
      },
      "id": "DevicesLongRunningOperationResponse",
      "description": "Long running operation response.",
      "type": "object"
    },
    "DeviceClaim": {
      "description": "containing the necessary info about a claim for a partner.",
      "type": "object",
      "properties": {
        "sectionType": {
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "section type.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ]
        },
        "ownerCompanyId": {
          "description": "owner id",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "DeviceClaim"
    },
    "PerDeviceStatusInBatch": {
      "description": "Stores the processing result for each device.",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "device id of the device if process succeeds.",
          "format": "int64",
          "type": "string"
        },
        "status": {
          "enumDescriptions": [
            "Invalid code. Shouldn' be used.",
            "Unknown error.\nUnknown error is we don't expect it here.",
            "Other error.\nOther error is we know/expect this error, but not having proper error\ncode yet.",
            "Success.",
            "Permission denied",
            "Invalid device identifier.",
            "Invalid section type.",
            "This section is claimed by other company."
          ],
          "enum": [
            "SINGLE_DEVICE_STATUS_UNSPECIFIED",
            "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR",
            "SINGLE_DEVICE_STATUS_OTHER_ERROR",
            "SINGLE_DEVICE_STATUS_SUCCESS",
            "SINGLE_DEVICE_STATUS_PERMISSION_DENIED",
            "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER",
            "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE",
            "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS"
          ],
          "description": "Process result.",
          "type": "string"
        },
        "errorIdentifier": {
          "description": "Error identifier.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Error message",
          "type": "string"
        }
      },
      "id": "PerDeviceStatusInBatch"
    },
    "FindDevicesByOwnerRequest": {
      "properties": {
        "pageToken": {
          "description": "Page token",
          "type": "string"
        },
        "sectionType": {
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "The section type.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ]
        },
        "customerId": {
          "description": "List of customer ids to search for.",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "string"
          }
        },
        "limit": {
          "description": "The number of devices to show in the result.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "FindDevicesByOwnerRequest",
      "description": "Request to find devices by customers.",
      "type": "object"
    },
    "ClaimDevicesRequest": {
      "description": "Request to claim devices asynchronously in batch.",
      "type": "object",
      "properties": {
        "claims": {
          "description": "list of claims.",
          "type": "array",
          "items": {
            "$ref": "PartnerClaim"
          }
        }
      },
      "id": "ClaimDevicesRequest"
    },
    "DeviceIdentifier": {
      "properties": {
        "serialNumber": {
          "description": "Serial number (optional)",
          "type": "string"
        },
        "imei": {
          "description": "IMEI",
          "type": "string"
        },
        "meid": {
          "description": "MEID",
          "type": "string"
        },
        "manufacturer": {
          "description": "Manufacturer name to match `android.os.Build.MANUFACTURER` (required).\nAllowed values listed in\n[manufacturer names](/zero-touch/resources/manufacturer-names).",
          "type": "string"
        }
      },
      "id": "DeviceIdentifier",
      "description": "DeviceIdentifiers identifies an unique device.",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "This field will contain a `DevicesLongRunningOperationResponse` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations/some/unique/name`.",
          "type": "string"
        },
        "error": {
          "description": "This field will always be not set if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. In this case, error information for each device is set in `response.perDeviceStatus.result.status`.",
          "$ref": "Status"
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "This field will contain a `DevicesLongRunningOperationMetadata` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.",
          "type": "object"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        }
      },
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object"
    },
    "UnclaimDevicesRequest": {
      "properties": {
        "unclaims": {
          "description": "list of unclaims.",
          "type": "array",
          "items": {
            "$ref": "PartnerUnclaim"
          }
        }
      },
      "id": "UnclaimDevicesRequest",
      "description": "Request to unclaim devices asynchronously in batch.",
      "type": "object"
    },
    "FindDevicesByDeviceIdentifierRequest": {
      "properties": {
        "deviceIdentifier": {
          "description": "The device identifier to search",
          "$ref": "DeviceIdentifier"
        },
        "pageToken": {
          "description": "Page token",
          "type": "string"
        },
        "limit": {
          "description": "Number of devices to show.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "FindDevicesByDeviceIdentifierRequest",
      "description": "Request to find devices.",
      "type": "object"
    },
    "Status": {
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "type": "object"
    },
    "OperationPerDevice": {
      "description": "Operation the server received for every device.",
      "type": "object",
      "properties": {
        "claim": {
          "description": "Request to claim a device.",
          "$ref": "PartnerClaim"
        },
        "updateMetadata": {
          "description": "Request to set metadata for a device.",
          "$ref": "UpdateMetadataArguments"
        },
        "unclaim": {
          "$ref": "PartnerUnclaim",
          "description": "Request to unclaim a device."
        },
        "result": {
          "$ref": "PerDeviceStatusInBatch",
          "description": "Processing result for every device."
        }
      },
      "id": "OperationPerDevice"
    },
    "FindDevicesByOwnerResponse": {
      "description": "Response containing found devices.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Page token of next page",
          "type": "string"
        },
        "devices": {
          "description": "Devices found.",
          "type": "array",
          "items": {
            "$ref": "Device"
          }
        }
      },
      "id": "FindDevicesByOwnerResponse"
    },
    "ClaimDeviceRequest": {
      "description": "Request message to claim a device on behalf of a customer.",
      "type": "object",
      "properties": {
        "deviceIdentifier": {
          "description": "The device identifier of the device to claim.",
          "$ref": "DeviceIdentifier"
        },
        "sectionType": {
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "Section to claim",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ]
        },
        "customerId": {
          "description": "The customer to claim for.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "ClaimDeviceRequest"
    },
    "DevicesLongRunningOperationMetadata": {
      "properties": {
        "processingStatus": {
          "enum": [
            "BATCH_PROCESS_STATUS_UNSPECIFIED",
            "BATCH_PROCESS_PENDING",
            "BATCH_PROCESS_IN_PROGRESS",
            "BATCH_PROCESS_PROCESSED"
          ],
          "description": "The overall processing status.",
          "type": "string",
          "enumDescriptions": [
            "Invalid code. Shouldn't be used.",
            "Pending",
            "In progress",
            "Processed.\nThis doesn't mean all items were processed sucessfully, you should\ncheck the `response` field for the result of every item."
          ]
        },
        "progress": {
          "description": "Processing progress from 0 to 100.",
          "format": "int32",
          "type": "integer"
        },
        "devicesCount": {
          "description": "Number of devices parsed in your requests.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DevicesLongRunningOperationMetadata",
      "description": "Long running operation metadata.",
      "type": "object"
    },
    "UpdateDeviceMetadataInBatchRequest": {
      "description": "Request to update device metadata in batch.",
      "type": "object",
      "properties": {
        "updates": {
          "description": "list of metadata updates.",
          "type": "array",
          "items": {
            "$ref": "UpdateMetadataArguments"
          }
        }
      },
      "id": "UpdateDeviceMetadataInBatchRequest"
    },
    "ClaimDeviceResponse": {
      "description": "Response message containing device id of the claim.",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "the device id of the claimed device.",
          "format": "int64",
          "type": "string"
        },
        "deviceName": {
          "description": "the resource name of the device in\n'partners/[PARTNER_ID]/devices/[DEVICE_ID]'.",
          "type": "string"
        }
      },
      "id": "ClaimDeviceResponse"
    },
    "ListCustomersResponse": {
      "description": "Response message of all customers related to this partner.",
      "type": "object",
      "properties": {
        "customers": {
          "description": "List of customers related to this partner.",
          "type": "array",
          "items": {
            "$ref": "Company"
          }
        }
      },
      "id": "ListCustomersResponse"
    },
    "UpdateMetadataArguments": {
      "properties": {
        "deviceIdentifier": {
          "description": "device identifier.",
          "$ref": "DeviceIdentifier"
        },
        "deviceMetadata": {
          "description": "The metadata to update.",
          "$ref": "DeviceMetadata"
        },
        "deviceId": {
          "description": "device id of the device.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "UpdateMetadataArguments",
      "description": "Identifies metdata updates to one device.",
      "type": "object"
    },
    "Device": {
      "properties": {
        "deviceId": {
          "description": "Device id",
          "format": "int64",
          "type": "string"
        },
        "configuration": {
          "description": "The resource name of the configuration.\nOnly set for customers.",
          "type": "string"
        },
        "claims": {
          "description": "claims",
          "type": "array",
          "items": {
            "$ref": "DeviceClaim"
          }
        },
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "Device identifier"
        },
        "deviceMetadata": {
          "$ref": "DeviceMetadata",
          "description": "Device metadata"
        },
        "name": {
          "description": "Resource name in 'partners/[PARTNER_ID]/devices/[DEVICE_ID]'.",
          "type": "string"
        }
      },
      "id": "Device",
      "description": "Device",
      "type": "object"
    },
    "Company": {
      "description": "Company",
      "type": "object",
      "properties": {
        "ownerEmails": {
          "description": "Owner email.\nOwner is able to operate on the portal, and modify admins and other owners.\nThis field is a WRITE-only field at creation time.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "companyId": {
          "description": "company id",
          "format": "int64",
          "type": "string"
        },
        "companyName": {
          "description": "company name",
          "type": "string"
        },
        "name": {
          "description": "REST Resource name.",
          "type": "string"
        },
        "adminEmails": {
          "description": "Admin email.\nAdmins will be able to operate on the portal.\nThis field is a WRITE-only field at creation time.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Company"
    },
    "UpdateDeviceMetadataRequest": {
      "description": "Request to set metadata for a device.",
      "type": "object",
      "properties": {
        "deviceMetadata": {
          "description": "The metdata to set.",
          "$ref": "DeviceMetadata"
        }
      },
      "id": "UpdateDeviceMetadataRequest"
    },
    "PartnerUnclaim": {
      "description": "Identifies one unclaim request.",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "device id of the device.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "device identifier of the device."
        },
        "sectionType": {
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ],
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "section type to unclaim.",
          "type": "string"
        }
      },
      "id": "PartnerUnclaim"
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "FindDevicesByDeviceIdentifierResponse": {
      "description": "Response containing found devices.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Page token of next page",
          "type": "string"
        },
        "devices": {
          "description": "Found devices.",
          "type": "array",
          "items": {
            "$ref": "Device"
          }
        }
      },
      "id": "FindDevicesByDeviceIdentifierResponse"
    },
    "PartnerClaim": {
      "properties": {
        "deviceIdentifier": {
          "description": "Device identifier of the device.",
          "$ref": "DeviceIdentifier"
        },
        "deviceMetadata": {
          "$ref": "DeviceMetadata",
          "description": "metadata to set at claim."
        },
        "sectionType": {
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "section type to claim.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ]
        },
        "customerId": {
          "description": "customer id to claim for.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "PartnerClaim",
      "description": "Identifies one claim request.",
      "type": "object"
    },
    "UnclaimDeviceRequest": {
      "properties": {
        "deviceId": {
          "description": "The device id returned by ClaimDevice.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "The device identifier you use when you claimed this device."
        },
        "sectionType": {
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "The section type to unclaim for.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ]
        }
      },
      "id": "UnclaimDeviceRequest",
      "description": "Request message to unclaim a device.",
      "type": "object"
    }
  },
  "protocol": "rest",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "version": "v1",
  "baseUrl": "https://androiddeviceprovisioning.googleapis.com/",
  "canonicalName": "Android Provisioning Partner",
  "kind": "discovery#restDescription",
  "description": "Automates reseller integration into Zero Touch Provisioning by assigning devices to customers and creating device reports.",
  "servicePath": "",
  "rootUrl": "https://androiddeviceprovisioning.googleapis.com/",
  "basePath": "",
  "ownerDomain": "google.com",
  "name": "androiddeviceprovisioning",
  "batchPath": "batch"
}
