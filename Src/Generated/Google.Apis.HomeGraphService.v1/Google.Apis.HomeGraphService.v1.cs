// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.41.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   HomeGraph API Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/actions/smarthome/create-app#request-sync'>HomeGraph API</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>20190906 (1709)
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/actions/smarthome/create-app#request-sync'>
 *              https://developers.google.com/actions/smarthome/create-app#request-sync</a>
 *      <tr><th>Discovery Name<td>homegraph
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using HomeGraph API can be found at
 * <a href='https://developers.google.com/actions/smarthome/create-app#request-sync'>https://developers.google.com/actions/smarthome/create-app#request-sync</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.HomeGraphService.v1
{
    /// <summary>The HomeGraphService Service.</summary>
    public class HomeGraphServiceService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public HomeGraphServiceService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public HomeGraphServiceService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            agentUsers = new AgentUsersResource(this);
            devices = new DevicesResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "homegraph"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
        #if NETSTANDARD1_3 || NETSTANDARD2_0 || NET45
            get { return BaseUriOverride ?? "https://homegraph.googleapis.com/"; }
        #else
            get { return "https://homegraph.googleapis.com/"; }
        #endif
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }

        #if !NET40
        /// <summary>Gets the batch base URI; <c>null</c> if unspecified.</summary>
        public override string BatchUri
        {
            get { return "https://homegraph.googleapis.com/batch"; }
        }

        /// <summary>Gets the batch base path; <c>null</c> if unspecified.</summary>
        public override string BatchPath
        {
            get { return "batch"; }
        }
        #endif





        private readonly AgentUsersResource agentUsers;

        /// <summary>Gets the AgentUsers resource.</summary>
        public virtual AgentUsersResource AgentUsers
        {
            get { return agentUsers; }
        }

        private readonly DevicesResource devices;

        /// <summary>Gets the Devices resource.</summary>
        public virtual DevicesResource Devices
        {
            get { return devices; }
        }
    }

    ///<summary>A base abstract class for HomeGraphService requests.</summary>
    public abstract class HomeGraphServiceBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new HomeGraphServiceBaseServiceRequest instance.</summary>
        protected HomeGraphServiceBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<XgafvEnum> Xgafv { get; set; }

        /// <summary>V1 error format.</summary>
        public enum XgafvEnum
        {
            /// <summary>v1 error format</summary>
            [Google.Apis.Util.StringValueAttribute("1")]
            Value1,
            /// <summary>v2 error format</summary>
            [Google.Apis.Util.StringValueAttribute("2")]
            Value2,
        }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
            /// <summary>Media download with context-dependent Content-Type</summary>
            [Google.Apis.Util.StringValueAttribute("media")]
            Media,
            /// <summary>Responses with Content-Type of application/x-protobuf</summary>
            [Google.Apis.Util.StringValueAttribute("proto")]
            Proto,
        }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes HomeGraphService parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "agentUsers" collection of methods.</summary>
    public class AgentUsersResource
    {
        private const string Resource = "agentUsers";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public AgentUsersResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Unlinks an agent user from Google. As a result, all data related to this user will be deleted.
        ///
        /// Here is how the agent user is created in Google:
        ///
        /// 1.  When a user opens their Google Home App, they can begin linking a 3p partner. 2.  User is guided through
        /// the OAuth process. 3.  After entering the 3p credentials, Google gets the 3p OAuth token and uses it to make
        /// a Sync call to the 3p partner and gets back all of the user's data, including `agent_user_id` and devices.
        /// 4.  Google creates the agent user and stores a mapping from the `agent_user_id` -> Google ID mapping. Google
        /// also stores all of the user's devices under that Google ID.
        ///
        /// The mapping from `agent_user_id` to Google ID is many to many, since one Google user can have multiple 3p
        /// accounts, and multiple Google users can map to one `agent_user_id` (e.g., a husband and wife share one Nest
        /// account username/password).
        ///
        /// The third-party user's identity is passed in as `agent_user_id`. The agent is identified by the JWT signed
        /// by the partner's service account.
        ///
        /// Note: Special characters (except "/") in `agent_user_id` must be URL-encoded.</summary>
        /// <param name="agentUserId">Required. Third-party user ID.</param>
        public virtual DeleteRequest Delete(string agentUserId)
        {
            return new DeleteRequest(service, agentUserId);
        }

        /// <summary>Unlinks an agent user from Google. As a result, all data related to this user will be deleted.
        ///
        /// Here is how the agent user is created in Google:
        ///
        /// 1.  When a user opens their Google Home App, they can begin linking a 3p partner. 2.  User is guided through
        /// the OAuth process. 3.  After entering the 3p credentials, Google gets the 3p OAuth token and uses it to make
        /// a Sync call to the 3p partner and gets back all of the user's data, including `agent_user_id` and devices.
        /// 4.  Google creates the agent user and stores a mapping from the `agent_user_id` -> Google ID mapping. Google
        /// also stores all of the user's devices under that Google ID.
        ///
        /// The mapping from `agent_user_id` to Google ID is many to many, since one Google user can have multiple 3p
        /// accounts, and multiple Google users can map to one `agent_user_id` (e.g., a husband and wife share one Nest
        /// account username/password).
        ///
        /// The third-party user's identity is passed in as `agent_user_id`. The agent is identified by the JWT signed
        /// by the partner's service account.
        ///
        /// Note: Special characters (except "/") in `agent_user_id` must be URL-encoded.</summary>
        public class DeleteRequest : HomeGraphServiceBaseServiceRequest<Google.Apis.HomeGraphService.v1.Data.Empty>
        {
            /// <summary>Constructs a new Delete request.</summary>
            public DeleteRequest(Google.Apis.Services.IClientService service, string agentUserId)
                : base(service)
            {
                AgentUserId = agentUserId;
                InitParameters();
            }


            /// <summary>Required. Third-party user ID.</summary>
            [Google.Apis.Util.RequestParameterAttribute("agentUserId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string AgentUserId { get; private set; }

            /// <summary>Request ID used for debugging.</summary>
            [Google.Apis.Util.RequestParameterAttribute("requestId", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string RequestId { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "delete"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "DELETE"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/{+agentUserId}"; }
            }

            /// <summary>Initializes Delete parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "agentUserId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "agentUserId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = @"^agentUsers/.+$",
                    });
                RequestParameters.Add(
                    "requestId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "requestId",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "devices" collection of methods.</summary>
    public class DevicesResource
    {
        private const string Resource = "devices";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public DevicesResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Gets the device states for the devices in QueryRequest. The third-party user's identity is passed
        /// in as `agent_user_id`. The agent is identified by the JWT signed by the third-party partner's service
        /// account.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual QueryRequest Query(Google.Apis.HomeGraphService.v1.Data.QueryRequest body)
        {
            return new QueryRequest(service, body);
        }

        /// <summary>Gets the device states for the devices in QueryRequest. The third-party user's identity is passed
        /// in as `agent_user_id`. The agent is identified by the JWT signed by the third-party partner's service
        /// account.</summary>
        public class QueryRequest : HomeGraphServiceBaseServiceRequest<Google.Apis.HomeGraphService.v1.Data.QueryResponse>
        {
            /// <summary>Constructs a new Query request.</summary>
            public QueryRequest(Google.Apis.Services.IClientService service, Google.Apis.HomeGraphService.v1.Data.QueryRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.HomeGraphService.v1.Data.QueryRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "query"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/devices:query"; }
            }

            /// <summary>Initializes Query parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Reports device state and optionally sends device notifications. Called by an agent when the device
        /// state of a third-party changes or the agent wants to send a notification about the device. See [Implement
        /// Report State](/actions/smarthome/report-state) for more information. This method updates a predefined set of
        /// states for a device, which all devices have according to their prescribed traits (for example, a light will
        /// have the [OnOff](/actions/smarthome/traits/onoff) trait that reports the state `on` as a boolean value). A
        /// new state may not be created and an INVALID_ARGUMENT code will be thrown if so. It also optionally takes in
        /// a list of Notifications that may be created, which are associated to this state change.
        ///
        /// The third-party user's identity is passed in as `agent_user_id`. The agent is identified by the JWT signed
        /// by the partner's service account.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual ReportStateAndNotificationRequest ReportStateAndNotification(Google.Apis.HomeGraphService.v1.Data.ReportStateAndNotificationRequest body)
        {
            return new ReportStateAndNotificationRequest(service, body);
        }

        /// <summary>Reports device state and optionally sends device notifications. Called by an agent when the device
        /// state of a third-party changes or the agent wants to send a notification about the device. See [Implement
        /// Report State](/actions/smarthome/report-state) for more information. This method updates a predefined set of
        /// states for a device, which all devices have according to their prescribed traits (for example, a light will
        /// have the [OnOff](/actions/smarthome/traits/onoff) trait that reports the state `on` as a boolean value). A
        /// new state may not be created and an INVALID_ARGUMENT code will be thrown if so. It also optionally takes in
        /// a list of Notifications that may be created, which are associated to this state change.
        ///
        /// The third-party user's identity is passed in as `agent_user_id`. The agent is identified by the JWT signed
        /// by the partner's service account.</summary>
        public class ReportStateAndNotificationRequest : HomeGraphServiceBaseServiceRequest<Google.Apis.HomeGraphService.v1.Data.ReportStateAndNotificationResponse>
        {
            /// <summary>Constructs a new ReportStateAndNotification request.</summary>
            public ReportStateAndNotificationRequest(Google.Apis.Services.IClientService service, Google.Apis.HomeGraphService.v1.Data.ReportStateAndNotificationRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.HomeGraphService.v1.Data.ReportStateAndNotificationRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "reportStateAndNotification"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/devices:reportStateAndNotification"; }
            }

            /// <summary>Initializes ReportStateAndNotification parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Requests a `SYNC` call from Google to a 3p partner's home control agent for a user.
        ///
        /// The third-party user's identity is passed in as `agent_user_id` (see RequestSyncDevicesRequest) and
        /// forwarded back to the agent. The agent is identified by the API key or JWT signed by the partner's service
        /// account.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual RequestSyncRequest RequestSync(Google.Apis.HomeGraphService.v1.Data.RequestSyncDevicesRequest body)
        {
            return new RequestSyncRequest(service, body);
        }

        /// <summary>Requests a `SYNC` call from Google to a 3p partner's home control agent for a user.
        ///
        /// The third-party user's identity is passed in as `agent_user_id` (see RequestSyncDevicesRequest) and
        /// forwarded back to the agent. The agent is identified by the API key or JWT signed by the partner's service
        /// account.</summary>
        public class RequestSyncRequest : HomeGraphServiceBaseServiceRequest<Google.Apis.HomeGraphService.v1.Data.RequestSyncDevicesResponse>
        {
            /// <summary>Constructs a new RequestSync request.</summary>
            public RequestSyncRequest(Google.Apis.Services.IClientService service, Google.Apis.HomeGraphService.v1.Data.RequestSyncDevicesRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.HomeGraphService.v1.Data.RequestSyncDevicesRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "requestSync"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/devices:requestSync"; }
            }

            /// <summary>Initializes RequestSync parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Gets all the devices associated with the given third-party user. The third-party user's identity is
        /// passed in as `agent_user_id`. The agent is identified by the JWT signed by the third-party partner's service
        /// account.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual SyncRequest Sync(Google.Apis.HomeGraphService.v1.Data.SyncRequest body)
        {
            return new SyncRequest(service, body);
        }

        /// <summary>Gets all the devices associated with the given third-party user. The third-party user's identity is
        /// passed in as `agent_user_id`. The agent is identified by the JWT signed by the third-party partner's service
        /// account.</summary>
        public class SyncRequest : HomeGraphServiceBaseServiceRequest<Google.Apis.HomeGraphService.v1.Data.SyncResponse>
        {
            /// <summary>Constructs a new Sync request.</summary>
            public SyncRequest(Google.Apis.Services.IClientService service, Google.Apis.HomeGraphService.v1.Data.SyncRequest body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.HomeGraphService.v1.Data.SyncRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "sync"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/devices:sync"; }
            }

            /// <summary>Initializes Sync parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }
    }
}

namespace Google.Apis.HomeGraphService.v1.Data
{    

    /// <summary>Third-party partner's device ID for one device.</summary>
    public class AgentDeviceId : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Third-party partner's device ID.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Identifies a device in the third party or first party system.</summary>
    public class AgentOtherDeviceId : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The agent's ID. Generally it is the agent's AoG project id.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("agentId")]
        public virtual string AgentId { get; set; } 

        /// <summary>Device ID defined by the agent. The device_id must be unique.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("deviceId")]
        public virtual string DeviceId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Third-party partner's device definition.</summary>
    public class Device : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Attributes for the traits supported by the device.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("attributes")]
        public virtual System.Collections.Generic.IDictionary<string,object> Attributes { get; set; } 

        /// <summary>Custom JSON data provided by the manufacturer and attached to QUERY and EXECUTE requests in
        /// AoG.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("customData")]
        public virtual string CustomData { get; set; } 

        /// <summary>Device manufacturer, model, hardware version, and software version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("deviceInfo")]
        public virtual DeviceInfo DeviceInfo { get; set; } 

        /// <summary>Third-party partner's device ID.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>Name of the device given by the third party. This includes names given to the device via third
        /// party device manufacturer's app, model names for the device, etc.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual DeviceNames Name { get; set; } 

        /// <summary>IDs of other devices associated with this device. This is used to represent a device group (e.g.
        /// bonded zone) or "facets" synced through different flows (e.g. Google Nest Hub Max with a Nest Camera).
        ///
        /// This may also be used to pass in alternate IDs used to identify a cloud synced device for local execution
        /// (i.e. local verification). If used for local verification, this field is synced from the cloud.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("otherDeviceIds")]
        public virtual System.Collections.Generic.IList<AgentOtherDeviceId> OtherDeviceIds { get; set; } 

        /// <summary>If the third-party partner's cloud configuration includes placing devices in rooms, the name of the
        /// room can be provided here.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("roomHint")]
        public virtual string RoomHint { get; set; } 

        /// <summary>As in roomHint, for structures that users set up in the partner's system.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("structureHint")]
        public virtual string StructureHint { get; set; } 

        /// <summary>Traits supported by the device.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("traits")]
        public virtual System.Collections.Generic.IList<string> Traits { get; set; } 

        /// <summary>Hardware type of the device (e.g. light, outlet, etc).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type { get; set; } 

        /// <summary>Indicates whether the state of this device is being reported to Google through
        /// ReportStateAndNotification call.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("willReportState")]
        public virtual System.Nullable<bool> WillReportState { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Device information.</summary>
    public class DeviceInfo : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Device hardware version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hwVersion")]
        public virtual string HwVersion { get; set; } 

        /// <summary>Device manufacturer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("manufacturer")]
        public virtual string Manufacturer { get; set; } 

        /// <summary>Device model.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        public virtual string Model { get; set; } 

        /// <summary>Device software version.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swVersion")]
        public virtual string SwVersion { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Different names for the device.</summary>
    public class DeviceNames : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>List of names provided by the partner rather than the user, often manufacturer names, SKUs,
        /// etc.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("defaultNames")]
        public virtual System.Collections.Generic.IList<string> DefaultNames { get; set; } 

        /// <summary>Primary name of the device, generally provided by the user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>Additional names provided by the user for the device.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nicknames")]
        public virtual System.Collections.Generic.IList<string> Nicknames { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A
    /// typical example is to use it as the request or the response type of an API method. For instance:
    ///
    /// service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    ///
    /// The JSON representation for `Empty` is empty JSON object `{}`.</summary>
    public class Empty : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request type for the [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should be
    /// the same format as the Actions on Google `action.devices.QUERY` [request](/actions/smarthome/create-
    /// app#actiondevicesquery) with the exception of the extra `agent_user_id` and no `intent` and `customData`
    /// fields.</summary>
    public class QueryRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Required. Third-party user ID.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("agentUserId")]
        public virtual string AgentUserId { get; set; } 

        /// <summary>Required. Inputs containing third-party partner's device IDs for which to get the device
        /// states.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("inputs")]
        public virtual System.Collections.Generic.IList<QueryRequestInput> Inputs { get; set; } 

        /// <summary>Request ID used for debugging.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("requestId")]
        public virtual string RequestId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Device ID inputs to QueryRequest.</summary>
    public class QueryRequestInput : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Payload containing third-party partner's device IDs.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("payload")]
        public virtual QueryRequestPayload Payload { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Payload containing device IDs.</summary>
    public class QueryRequestPayload : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Third-party partner's device IDs for which to get the device states.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("devices")]
        public virtual System.Collections.Generic.IList<AgentDeviceId> Devices { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response type for the [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should
    /// follow the same format as the Actions on Google `action.devices.QUERY` [response](/actions/smarthome/create-
    /// app#actiondevicesquery). # Example
    ///
    /// ```json { "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf", "payload": { "devices": { "123": { "on": true,
    /// "online": true }, "456": { "on": true, "online": true, "brightness": 80, "color": { "name": "cerulean",
    /// "spectrumRGB": 31655 } } } } } ```</summary>
    public class QueryResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Device states for the devices given in the request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("payload")]
        public virtual QueryResponsePayload Payload { get; set; } 

        /// <summary>Request ID used for debugging. Copied from the request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("requestId")]
        public virtual string RequestId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Payload containing device states information.</summary>
    public class QueryResponsePayload : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>States of the devices. Map of third-party device ID to struct of device states.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("devices")]
        public virtual System.Collections.Generic.IDictionary<string,System.Collections.Generic.IDictionary<string,object>> Devices { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>The states and notifications specific to a device.</summary>
    public class ReportStateAndNotificationDevice : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Notifications metadata for devices.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("notifications")]
        public virtual System.Collections.Generic.IDictionary<string,object> Notifications { get; set; } 

        /// <summary>States of devices to update.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("states")]
        public virtual System.Collections.Generic.IDictionary<string,object> States { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request type for the
    /// [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call. It
    /// may include States, Notifications, or both. This request uses globally unique flattened state names instead of
    /// namespaces based on traits to align with the existing QUERY and EXECUTE APIs implemented by 90+ Smart Home
    /// partners. States and notifications are defined per `device_id` (for example, "123" and "456" in the following
    /// example). # Example ```json { "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf", "agentUserId": "1234",
    /// "payload": { "devices": { "states": { "123": { "on": true }, "456": { "on": true, "brightness": 10 } }, } } }
    /// ```</summary>
    public class ReportStateAndNotificationRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Required. Third-party user ID.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("agentUserId")]
        public virtual string AgentUserId { get; set; } 

        /// <summary>Unique identifier per event (for example, a doorbell press).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("eventId")]
        public virtual string EventId { get; set; } 

        /// <summary>Token to maintain state in the follow up notification response.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("followUpToken")]
        public virtual string FollowUpToken { get; set; } 

        /// <summary>State of devices to update and notification metadata for devices. For example, if a user turns a
        /// light on manually, a state update should be sent so that the information is always the current status of the
        /// device. Notifications are independent from the state and its piece of the payload should contain everything
        /// necessary to notify the user. Although it may be related to a state change, it does not need to be. For
        /// example, if a device can turn on/off and change temperature, the states reported would include both "on" and
        /// "70 degrees" but the 3p may choose not to send any notification for that, or to only say that the "the room
        /// is heating up", keeping state and notification independent.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("payload")]
        public virtual StateAndNotificationPayload Payload { get; set; } 

        /// <summary>Request ID used for debugging.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("requestId")]
        public virtual string RequestId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response type for the
    /// [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)
    /// call.</summary>
    public class ReportStateAndNotificationResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Request ID copied from ReportStateAndNotificationRequest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("requestId")]
        public virtual string RequestId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request type for the
    /// [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices) call.</summary>
    public class RequestSyncDevicesRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Required. Third-party user ID issued by agent's third-party identity provider.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("agentUserId")]
        public virtual string AgentUserId { get; set; } 

        /// <summary>Optional. If set, the request will be added to a queue and a response will be returned immediately.
        /// The queue allows for de-duplication of simultaneous requests.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("async")]
        public virtual System.Nullable<bool> Async__ { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response type for the
    /// [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices) call. Intentionally empty
    /// upon success. An HTTP response code is returned with more details upon failure.</summary>
    public class RequestSyncDevicesResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Payload containing the state and notification information for devices.</summary>
    public class StateAndNotificationPayload : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The devices for updating state and sending notifications.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("devices")]
        public virtual ReportStateAndNotificationDevice Devices { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Request type for the [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call. This should follow
    /// the same format as the Actions on Google `action.devices.SYNC` [request](/actions/smarthome/create-
    /// app#actiondevicessync) with the exception of the extra `agent_user_id` and no `intent` field.</summary>
    public class SyncRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Required. Third-party user ID.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("agentUserId")]
        public virtual string AgentUserId { get; set; } 

        /// <summary>Request ID used for debugging.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("requestId")]
        public virtual string RequestId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response type for the [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call. This should follow
    /// the same format as the Actions on Google `action.devices.SYNC` [response](/actions/smarthome/create-
    /// app#actiondevicessync). # Example
    ///
    /// ```json { "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf", "payload": { "agentUserId": "1836.15267389",
    /// "devices": [{ "id": "123", "type": "action.devices.types.OUTLET", "traits": [ "action.devices.traits.OnOff" ],
    /// "name": { "defaultNames": ["My Outlet 1234"], "name": "Night light", "nicknames": ["wall plug"] },
    /// "willReportState": false, "deviceInfo": { "manufacturer": "lights-out-inc", "model": "hs1234", "hwVersion":
    /// "3.2", "swVersion": "11.4" }, "customData": { "fooValue": 74, "barValue": true, "bazValue": "foo" } }] } }
    /// ```</summary>
    public class SyncResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Devices associated with the third-party user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("payload")]
        public virtual SyncResponsePayload Payload { get; set; } 

        /// <summary>Request ID used for debugging. Copied from the request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("requestId")]
        public virtual string RequestId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Payload containing device information.</summary>
    public class SyncResponsePayload : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Third-party user ID</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("agentUserId")]
        public virtual string AgentUserId { get; set; } 

        /// <summary>Devices associated with the third-party user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("devices")]
        public virtual System.Collections.Generic.IList<Device> Devices { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
